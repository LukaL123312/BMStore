// <auto-generated />
using System;
using BMStore.Infrastructure.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BMStore.Infrastructure.Migrations.BMStoreDb
{
    [DbContext(typeof(BMStoreDbContext))]
    partial class BMStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BMStore.Domain.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressOwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressOwnerId");

                    b.ToTable("AddressEntity");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("CategoryEntity");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommentAuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentedProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommentAuthorId");

                    b.HasIndex("CommentedProductId");

                    b.ToTable("CommentEntity");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.ImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("ImageEntity");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.KeywordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("KeywordEntity");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.LayoutEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BackgroundColor")
                        .HasColumnType("int");

                    b.Property<string>("BackgroundImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Font")
                        .HasColumnType("int");

                    b.Property<string>("FooterStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainColor")
                        .HasColumnType("int");

                    b.Property<string>("OtherStyling")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LayoutEntity");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.PackageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LayoutId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PackagePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentOption")
                        .HasColumnType("int");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("UserEntityId1")
                        .HasColumnType("int");

                    b.Property<int?>("UserEntityId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("UserEntityId1");

                    b.HasIndex("UserEntityId2");

                    b.ToTable("PackageEntity");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionForAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceOnSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductEntityId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("SaleDuration")
                        .HasColumnType("time");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UserRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("ProductEntity");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackageEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PackageEntityId");

                    b.ToTable("UserEntities");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.AddressEntity", b =>
                {
                    b.HasOne("BMStore.Domain.Entities.UserEntity", "AddressOwner")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressOwner");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.CategoryEntity", b =>
                {
                    b.HasOne("BMStore.Domain.Entities.CategoryEntity", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.CommentEntity", b =>
                {
                    b.HasOne("BMStore.Domain.Entities.UserEntity", "CommentAuthor")
                        .WithMany("Comments")
                        .HasForeignKey("CommentAuthorId");

                    b.HasOne("BMStore.Domain.Entities.ProductEntity", "CommentedProduct")
                        .WithMany("UserComments")
                        .HasForeignKey("CommentedProductId");

                    b.Navigation("CommentAuthor");

                    b.Navigation("CommentedProduct");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.ImageEntity", b =>
                {
                    b.HasOne("BMStore.Domain.Entities.ProductEntity", null)
                        .WithMany("ImageUrls")
                        .HasForeignKey("ProductEntityId");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.KeywordEntity", b =>
                {
                    b.HasOne("BMStore.Domain.Entities.ProductEntity", null)
                        .WithMany("SearchKeywords")
                        .HasForeignKey("ProductEntityId");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.PackageEntity", b =>
                {
                    b.HasOne("BMStore.Domain.Entities.LayoutEntity", "Layout")
                        .WithMany()
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMStore.Domain.Entities.UserEntity", null)
                        .WithMany("Cart")
                        .HasForeignKey("UserEntityId");

                    b.HasOne("BMStore.Domain.Entities.UserEntity", null)
                        .WithMany("FavoritePackages")
                        .HasForeignKey("UserEntityId1");

                    b.HasOne("BMStore.Domain.Entities.UserEntity", null)
                        .WithMany("OrderedPackages")
                        .HasForeignKey("UserEntityId2");

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.ProductEntity", b =>
                {
                    b.HasOne("BMStore.Domain.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMStore.Domain.Entities.ProductEntity", null)
                        .WithMany("SimilarProducts")
                        .HasForeignKey("ProductEntityId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("BMStore.Domain.Entities.PackageEntity", null)
                        .WithMany("Users")
                        .HasForeignKey("PackageEntityId");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.PackageEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.ProductEntity", b =>
                {
                    b.Navigation("ImageUrls");

                    b.Navigation("SearchKeywords");

                    b.Navigation("SimilarProducts");

                    b.Navigation("UserComments");
                });

            modelBuilder.Entity("BMStore.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart");

                    b.Navigation("Comments");

                    b.Navigation("FavoritePackages");

                    b.Navigation("OrderedPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
